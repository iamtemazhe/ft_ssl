/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sha2_utils_64.h                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jwinthei <jwinthei@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/12/03 21:46:10 by jwinthei          #+#    #+#             */
/*   Updated: 2020/12/29 11:21:38 by jwinthei         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef SHA2_UTILS_64_H
# define SHA2_UTILS_64_H

# include "sha2_const.h"

# define CH_64(x, y, z)		(((x) & (y)) ^ (~(x) & (z)))
# define MAJ_64(x, y, z)	(((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
# define SUM0_64(x)         (ROTR64(x, 28) ^ ROTR64(x, 34) ^ ROTR64(x, 39))
# define SUM1_64(x)         (ROTR64(x, 14) ^ ROTR64(x, 18) ^ ROTR64(x, 41))
# define SIGMA0_64(x)		(ROTR64(x, 1) ^ ROTR64(x, 8) ^ SHIFTR(x, 7))
# define SIGMA1_64(x)		(ROTR64(x, 19) ^ ROTR64(x, 61) ^ SHIFTR(x, 6))

static const uint64_t		g_sha384_h[BYTE_SIZE] = {
	0xCBBB9D5DC1059ED8, 0x629A292A367CD507,
	0x9159015A3070DD17, 0x152FECD8F70E5939,
	0x67332667FFC00B31, 0x8EB44A8768581511,
	0xDB0C2E0D64F98FA7, 0x47B5481DBEFA4FA4
};

static const uint64_t		g_sha512_h[BYTE_SIZE] = {
	0x6A09E667F3BCC908, 0xBB67AE8584CAA73B,
	0x3C6EF372FE94F82B, 0xA54FF53A5F1D36F1,
	0x510E527FADE682D1, 0x9B05688C2B3E6C1F,
	0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179
};

static const uint64_t		g_sha512_224_h[BYTE_SIZE] = {
	0x8C3D37C819544DA2, 0x73E1996689DCD4D6,
	0x1DFAB7AE32FF9C82, 0x679DD514582F9FCF,
	0x0F6D2B697BD44DA8, 0x77E36F7304C48942,
	0x3F9D85A86A1D36C8, 0x1112E6AD91D692A1
};

static const uint64_t		g_sha512_256_h[BYTE_SIZE] = {
	0x22312194FC2BF72C, 0x9F555FA3C84C64C2,
	0x2393B86B6F53B151, 0x963877195940EABD,
	0x96283EE2A88EFFE3, 0xBE5E1E2553863992,
	0x2B0199FC2C85B8AA, 0x0EB72DDC81C52CA2
};

static const uint64_t		g_sha2_k_64[SHA2_ROUND_64] = {
	0x428A2F98D728AE22, 0x7137449123EF65CD,
	0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC,
	0x3956C25BF348B538, 0x59F111F1B605D019,
	0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118,
	0xD807AA98A3030242, 0x12835B0145706FBE,
	0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
	0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1,
	0x9BDC06A725C71235, 0xC19BF174CF692694,
	0xE49B69C19EF14AD2, 0xEFBE4786384F25E3,
	0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
	0x2DE92C6F592B0275, 0x4A7484AA6EA6E483,
	0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
	0x983E5152EE66DFAB, 0xA831C66D2DB43210,
	0xB00327C898FB213F, 0xBF597FC7BEEF0EE4,
	0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
	0x06CA6351E003826F, 0x142929670A0E6E70,
	0x27B70A8546D22FFC, 0x2E1B21385C26C926,
	0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
	0x650A73548BAF63DE, 0x766A0ABB3C77B2A8,
	0x81C2C92E47EDAEE6, 0x92722C851482353B,
	0xA2BFE8A14CF10364, 0xA81A664BBC423001,
	0xC24B8B70D0F89791, 0xC76C51A30654BE30,
	0xD192E819D6EF5218, 0xD69906245565A910,
	0xF40E35855771202A, 0x106AA07032BBD1B8,
	0x19A4C116B8D2D0C8, 0x1E376C085141AB53,
	0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8,
	0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB,
	0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3,
	0x748F82EE5DEFB2FC, 0x78A5636F43172F60,
	0x84C87814A1F0AB72, 0x8CC702081A6439EC,
	0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9,
	0xBEF9A3F7B2C67915, 0xC67178F2E372532B,
	0xCA273ECEEA26619C, 0xD186B8C721C0C207,
	0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178,
	0x06F067AA72176FBA, 0x0A637DC5A2C898A6,
	0x113F9804BEF90DAE, 0x1B710B35131C471B,
	0x28DB77F523047D84, 0x32CAAB7B40C72493,
	0x3C9EBE0A15C9BEBC, 0x431D67C49C100D4C,
	0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A,
	0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817
};

typedef struct				s_sha2_64
{
	t_hash_op				op;
	uint64_t				h_[BYTE_SIZE];
	uint64_t				a;
	uint64_t				b;
	uint64_t				c;
	uint64_t				d;
	uint64_t				e;
	uint64_t				f;
	uint64_t				g;
	uint64_t				h;
	uint64_t				words[SHA2_ROUND_64];
	const uint64_t			*c_h;
	const uint64_t			*c_k;
}							t_sha2_64;

void						sha2_hash_64(t_sha2_64 *sha2);
t_data						*sha2_64(t_sha2_64 *sha2, const void *data,\
										size_t n);
#endif
